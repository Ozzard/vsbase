<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><META http-equiv="Content-Type" content="text/html; charset=utf-8"><link rel="SHORTCUT ICON" href="./../icons/favicon.ico"><link rel="stylesheet" type="text/css" href="./../styles/branding.css"><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css"><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Output Window Service</title><meta name="Language" content="en-us"><meta name="Microsoft.Help.Id" content="9452cedb-1942-4d9b-b911-7ef1e882f421"><meta name="Description" content="The Output Window package provides support for extensions to create and use the Output Window in Visual Studio using MEF."><meta name="Microsoft.Help.ContentType" content="Concepts"><meta name="BrandingAware" content="'true'"><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css"><link type="text/css" rel="stylesheet" href="./../styles/highlight.css"><script type="text/javascript" src="../scripts/highlight.js"><!----></script><meta name="SelfBranded" content="true"></head><body onload="onLoad()" class="primary-mtps-offline-document"><header class="ux-header"><div class="header-top-bar">Tunnel Vision Labs' Base Extensions Library for Visual Studio</div></header><div class="OH_outerDiv" style="padding: 35px 20px 0 20px;"><div class="OH_leftNav" id="LeftNav">
  <div id="tocnav">
    <div class="toclevel0" data-toclevel="0" style="padding-left: 0px;"><a class="toc_collapsed" onclick="javascript: Toggle(this);" href="#"></a><a data-tochassubtree="true" href="262e0a6e-ce5a-4f40-8f5e-3889dbb63784.htm" title="VS Base Extensions Library" tocid="roottoc">VS Base Extensions Library</a></div><div class="toclevel1" data-toclevel="1" style="padding-left: 13px;" data-childrenloaded="true"><a class="toc_expanded" onclick="javascript: Toggle(this);" href="#"></a><a data-tochassubtree="true" href="69c59220-5eff-4177-a632-b7c1b4981501.htm" title="Packages" tocid="69c59220-5eff-4177-a632-b7c1b4981501">Packages</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><a class="toc_collapsed" onclick="javascript: Toggle(this);" href="#"></a><a data-tochassubtree="true" href="c2cfc56d-e966-492a-9b12-66c7d01e7146.htm" title="Shell Service Extensions" tocid="c2cfc56d-e966-492a-9b12-66c7d01e7146">Shell Service Extensions</a></div><div class="toclevel2 current" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="9452cedb-1942-4d9b-b911-7ef1e882f421.htm" title="Output Window Service" tocid="9452cedb-1942-4d9b-b911-7ef1e882f421">Output Window Service</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="3d25ef44-296a-4523-8286-ce65f8b47c76.htm" title="Shell Utility Library" tocid="3d25ef44-296a-4523-8286-ce65f8b47c76">Shell Utility Library</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="07a54f98-14af-49e8-96b4-7a15a7fcfe2d.htm" title="Text Editor Utility Library" tocid="07a54f98-14af-49e8-96b4-7a15a7fcfe2d">Text Editor Utility Library</a></div><div class="toclevel2" data-toclevel="2" style="padding-left: 26px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="01698620-4fc8-4cb0-bb42-5b3a84b8dd66.htm" title="Commenter Service" tocid="01698620-4fc8-4cb0-bb42-5b3a84b8dd66">Commenter Service</a></div></div></div><div id="TocResize" class="OH_TocResize"><img id="ResizeImageIncrease" src="../icons/open.gif" onclick="onIncreaseToc()" alt="Expand" title="Expand"><img id="ResizeImageReset" src="../icons/close.gif" style="display:none" onclick="onResetToc()" alt="Minimize" title="Minimize"></div><div class="OH_outerContent" id="OuterContent" style="margin-left: 280px;"><h1 class="title">Output Window Service</h1><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>
        The Output Window package provides support for extensions to create and use the Output Window
        in Visual Studio using MEF.
      </p><p>
        Library Status: Under Development (not yet released)
      </p></div><a id="Installation"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Installation and Distribution</div></div><p>
          This package is available through NuGet under the following package IDs.
        </p><ul><li><span class="code">Tvl.VisualStudio.OutputWindow</span>: This package should be installed into the project
              that creates your VSIX file. If your Visual Studio extension is not broken into multiple sub-projects,
              this is the only Output Window package you will need to explicitly install to use these features.
            </li><li><span class="code">Tvl.VisualStudio.OutputWindow.Interfaces</span>: This package should be installed for
              any project that uses the Output Window service.
            </li></ul><p>
          After installing the appropriate NuGet package(s), you will need to configure your extension to
          inform Visual Studio of the dependency by including the following block in your <em>source.extension.vsixmanifest</em>
          file.
        </p><div id="ID0EBGAAAAA" class="codeSnippetContainer"><div class="codeSnippetContainerTabs" id="ID0EBGAAAAA_tabs"><div id="ID0EBGAAAAA_tab1" class="codeSnippetContainerTabSingle" dir="ltr" EnableCopyCode="true"><a xmlns="">XML</a></div></div><div id="ID0EBGAAAAA_codecollection" class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EBGAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBGAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBGAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBGAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBGAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBGAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBGAAAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Reference</span> <span class="highlight-xml-attribute-name">Id</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Tvl.VisualStudio.OutputWindow.3EF11167-A319-43DB-B1B4-A9778A90FAE0"</span><span class="highlight-xml-bracket">&gt;</span> 
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Name</span><span class="highlight-xml-bracket">&gt;</span>Visual Studio Output Window Services<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Name</span><span class="highlight-xml-bracket">&gt;</span> 
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">VsixPath</span><span class="highlight-xml-bracket">&gt;</span>Tvl.VisualStudio.OutputWindow.vsix<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">VsixPath</span><span class="highlight-xml-bracket">&gt;</span> 
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Reference</span><span class="highlight-xml-bracket">&gt;</span></pre></div><div id="ID0EBGAAAAA_code_Plain_Div1" class="codeSnippetContainerCode" style="display: none"><pre>&lt;Reference Id="Tvl.VisualStudio.OutputWindow.3EF11167-A319-43DB-B1B4-A9778A90FAE0"&gt; 
  &lt;Name&gt;Visual Studio Output Window Services&lt;/Name&gt; 
  &lt;VsixPath&gt;Tvl.VisualStudio.OutputWindow.vsix&lt;/VsixPath&gt; 
&lt;/Reference&gt;</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBGAAAAA');</script><div class="alert"><table><tr><th><img class="mtps-img-src" src="./../icons/alert_note.gif" alt="Note"> <strong>Note</strong></th></tr><tr><td>
            A future release of this extension may include a feature to configure the <em>source.extension.vsixmanifest</em>
            file automatically.
          </td></tr></table></div><a id="Use"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Using the Output Window Service</div></div><p>
          This service allows extension developers to declare custom output window panes, as
          well as write content to the standard panes provided by visual studio (e.g. Debug
          or General).
        </p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Writing to the Output Window</div></div><p>
              Writing content to the output window consists of the following steps.
            </p><ol><li>
                  Get an instance of <span sdata="cer" target="T:Tvl.VisualStudio.OutputWindow.Interfaces.IOutputWindowService"><a href="T_Tvl_VisualStudio_OutputWindow_Interfaces_IOutputWindowService.htm" target="">IOutputWindowService</a></span>.
                  This is typically performed by using the MEF <span class="code">[Import]</span> attribute, as described in the documentation
                  for <span sdata="cer" target="T:Tvl.VisualStudio.OutputWindow.Interfaces.IOutputWindowService"><a href="T_Tvl_VisualStudio_OutputWindow_Interfaces_IOutputWindowService.htm" target="">IOutputWindowService</a></span>.
                </li><li>
                  Obtain the desired <span sdata="cer" target="T:Tvl.VisualStudio.OutputWindow.Interfaces.IOutputWindowPane"><a href="T_Tvl_VisualStudio_OutputWindow_Interfaces_IOutputWindowPane.htm" target="">IOutputWindowPane</a></span> from
                  the output window service by calling
                  <span sdata="cer" target="M:Tvl.VisualStudio.OutputWindow.Interfaces.IOutputWindowService.TryGetPane(System.String)"><a href="M_Tvl_VisualStudio_OutputWindow_Interfaces_IOutputWindowService_TryGetPane.htm" target="">TryGetPane(String)</a></span>.
                  The sections below describe the predefined panes, as well as the process for creating custom panes.
                </li><li>
                  Write the message(s) to the output window by calling
                  <span sdata="cer" target="M:Tvl.VisualStudio.OutputWindow.Interfaces.IOutputWindowPane.WriteLine(System.String)"><a href="M_Tvl_VisualStudio_OutputWindow_Interfaces_IOutputWindowPane_WriteLine.htm" target="">WriteLine(String)</a></span>
                  or <span sdata="cer" target="M:Tvl.VisualStudio.OutputWindow.Interfaces.IOutputWindowPane.Write(System.String)"><a href="M_Tvl_VisualStudio_OutputWindow_Interfaces_IOutputWindowPane_Write.htm" target="">Write(String)</a></span>.
                </li></ol><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Predefined Output Window Panes</div></div><p>
              The output window service provides access to several output window panes defined by Visual Studio, as well
              as two additional panes created by this extension (used in a variety of other extensions created by Tunnel
              Vision Labs). These panes my be accessed by passing one of the <span sdata="cer" target="T:Tvl.VisualStudio.OutputWindow.Interfaces.PredefinedOutputWindowPanes"><a href="T_Tvl_VisualStudio_OutputWindow_Interfaces_PredefinedOutputWindowPanes.htm" target="">PredefinedOutputWindowPanes</a></span>
              fields for the name parameter to <span sdata="cer" target="M:Tvl.VisualStudio.OutputWindow.Interfaces.IOutputWindowService.TryGetPane(System.String)"><a href="M_Tvl_VisualStudio_OutputWindow_Interfaces_IOutputWindowService_TryGetPane.htm" target="">TryGetPane(String)</a></span>.
            </p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Declaring Custom Output Window Panes</div></div><p>
              Custom output window panes may be declared by exporting the <span sdata="cer" target="T:Tvl.VisualStudio.OutputWindow.Interfaces.OutputWindowDefinition"><a href="T_Tvl_VisualStudio_OutputWindow_Interfaces_OutputWindowDefinition.htm" target="">OutputWindowDefinition</a></span>
              contract using MEF. Output window panes declared in this manner initially hidden from the Output Window each time Visual Studio starts.
              The pane will become available in the Output Window automatically the first time <span sdata="cer" target="M:Tvl.VisualStudio.OutputWindow.Interfaces.IOutputWindowService.TryGetPane(System.String)"><a href="M_Tvl_VisualStudio_OutputWindow_Interfaces_IOutputWindowService_TryGetPane.htm" target="">TryGetPane(String)</a></span> is called with the name of the custom pane.
              For more information and examples, see the documentation for <span sdata="cer" target="T:Tvl.VisualStudio.OutputWindow.Interfaces.OutputWindowDefinition"><a href="T_Tvl_VisualStudio_OutputWindow_Interfaces_OutputWindowDefinition.htm" target="">OutputWindowDefinition</a></span>.
            </p><a id="Debugging"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Debugging Extensions</div></div><p>
          While Visual Studio's VSIX Installer automatically installs nested VSIX references (which is the method by which
          the Output Window Services extension is delivered), the Visual Studio SDK will not perform this installation
          automatically in the experimental instance. After launching the experimental instance for the first time (or
          after you reset it), you will need to install the <a class="mtps-external-link" href="TODO" target="_blank">Visual Studio Output Window Service</a> extension from the Visual Studio Gallery and restart the experimental instance before your
          extension will work.
        </p><div class="alert"><table><tr><th><img class="mtps-img-src" src="./../icons/alert_note.gif" alt="Note"> <strong>Note</strong></th></tr><tr><td>
            A future release of this extension may improve support in this area by updating the <span class="code">.targets</span>
            file included in the implementation to automatically deploy the nested VSIX to the experimental instance
            for debugging purposes. Stay tuned!
          </td></tr></table></div><a id="Implementation"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Implementation Details</div></div><p>
          Since this extension exports a new MEF service for use across multiple extensions and multiple versions of
          Visual Studio, extremely careful consideration must be given to several implementation details to ensure
          consumers will not encounter conflicts in the future or be <a class="mtps-external-link" href="http://blogs.msdn.com/b/jaredpar/archive/2012/05/07/authoring-a-utility-library-for-visual-studio.aspx" target="_blank">subjected to cumbersome workarounds</a>.
        </p><ul><li><strong>Assembly Versioning:</strong> To ensure long-term compatibility of this extension with many other
              extensions, all communication between the MEF-exported Output Window service and consumers of the API is performed
              through a dedicated interfaces assembly, <span class="code">Tvl.VisualStudio.OutputWindow.Interfaces</span>. Following
              the initial release of this extension, the contracts defined by this assembly (e.g. the strong name and API) will
              <em>never change</em>. If the source for this assembly is ever updated, it will only be in ways
              that are guaranteed to not cause problems for existing installations, such as updated XML documentation or updating
              the NuGet packaging to simplify the installation process.
            </li><li><strong>Assembly Binding:</strong> Since the <span class="code">Tvl.VisualStudio.OutputWindow.Interfaces</span>
              assembly does not appear in a <span class="code">&lt;MefComponent&gt;</span> element within <em>source.extension.vsixmanifest</em>,
              there are a number of situations with traditional deployments where Visual Studio may be unable to locate the assembly
              at runtime. To avoid this situation, the <span class="code">Tvl.VisualStudio.OutputWindow</span> extension created
              for the implementation of the Output Window Service registers its installation folder in the Visual Studio binding path
              using the <span class="code">[ProvideBindingPath]</span> registration attribute. This feature ensures that the
              Output Window interfaces assembly will be available to all Visual Studio extensions, regardless of the manner in which
              they are deployed.
            </li></ul></div></div></div></div><div id="OH_footer" class="OH_footer"><p></p><div class="OH_feedbacklink"><a href="mailto:?subject=Tunnel+Vision+Labs%27+Base+Extensions+Library+for+Visual+Studio+Output+Window+Service+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div></div><script src="//code.jquery.com/jquery-1.11.0.min.js"></script><script type="text/javascript">$(document).ready(function () {DocumentReady();});</script></body></html>