<!DOCTYPE html ><html><head><META http-equiv="Content-Type" content="text/html; charset=utf-8"><meta charset="utf-8"><link rel="shortcut icon" href="../icons/favicon.ico"><link rel="stylesheet" type="text/css" href="../styles/branding.css"><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css"><script type="text/javascript" src="../scripts/branding.js"> </script><title>Packages</title><meta name="Language" content="en-us"><meta name="Microsoft.Help.Id" content="69c59220-5eff-4177-a632-b7c1b4981501"><meta name="Description" content="The Base Extensions Library for Visual Studio consists of a number separate service and utility libraries designed to simplify Visual Studio extension development."><meta name="Microsoft.Help.ContentType" content="Concepts"><meta name="BrandingAware" content="true"><link type="text/css" rel="stylesheet" href="../styles/highlight.css"><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css"><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle"><div class="pageHeader" id="PageHeader">Tunnel Vision Labs' Base Extensions Library for Visual Studio<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="262e0a6e-ce5a-4f40-8f5e-3889dbb63784.htm" title="Tunnel Vision Labs' Base Extensions Library for Visual Studio" tocid="roottoc">Tunnel Vision Labs' Base Extensions Library for Visual Studio</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="69c59220-5eff-4177-a632-b7c1b4981501.htm" title="Packages" tocid="69c59220-5eff-4177-a632-b7c1b4981501">Packages</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="c2cfc56d-e966-492a-9b12-66c7d01e7146.htm" title="Shell Service Extensions" tocid="c2cfc56d-e966-492a-9b12-66c7d01e7146">Shell Service Extensions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="9452cedb-1942-4d9b-b911-7ef1e882f421.htm" title="Output Window Service" tocid="9452cedb-1942-4d9b-b911-7ef1e882f421">Output Window Service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="3d25ef44-296a-4523-8286-ce65f8b47c76.htm" title="Shell Utility Library" tocid="3d25ef44-296a-4523-8286-ce65f8b47c76">Shell Utility Library</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="07a54f98-14af-49e8-96b4-7a15a7fcfe2d.htm" title="Text Editor Utility Library" tocid="07a54f98-14af-49e8-96b4-7a15a7fcfe2d">Text Editor Utility Library</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="01698620-4fc8-4cb0-bb42-5b3a84b8dd66.htm" title="Commenter Service" tocid="01698620-4fc8-4cb0-bb42-5b3a84b8dd66">Commenter Service</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png"></td><td class="titleColumn">Packages</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
        The Base Extensions Library for Visual Studio consists of a number separate service and
        utility libraries designed to simplify Visual Studio extension development. The Managed
        Extensibility Framework (MEF) places a number of restrictions on the manner in which
        reusable software components may be developed and shared between multiple extensions,
        so the library is separated according to the type of feature provided by each package.
      </p></div><div class="collapsibleAreaRegion" id="MEFServicePackages"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png">Packages Which Provide MEF Services</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          MEF Service libraries include one or more new services which are provided through an
          <span class="code">[Export]</span> attribute. Each of these libraries consists of two
          separate assemblies: an implementation assembly which provides the service and an
          interfaces assembly which defines interfaces through which other extensions can use
          and/or extend the behavior of the service.
        </p><p>
          Currently the following MEF Service libraries are included.
        </p><ul><li><p><a href="9452cedb-1942-4d9b-b911-7ef1e882f421.htm">Output Window Service</a></p></li><li><p><a href="01698620-4fc8-4cb0-bb42-5b3a84b8dd66.htm">Commenter Service</a></p></li></ul><h4 class="subHeading" id="Debugging">Debugging Extensions</h4><div class="subsection"><p>
              While Visual Studio's VSIX Installer automatically installs nested VSIX references (which is the method by which
              the MEF services extensions are delivered), the Visual Studio SDK will not perform this installation
              automatically in the experimental instance. After launching the experimental instance for the first time (or
              after you reset it), you will need to install the <a href="http://visualstudiogallery.msdn.microsoft.com/fca95a59-3fc6-444e-b20c-cc67828774cd" target="_blank">VSBase Services Debugging Support</a> extension from the Visual Studio Gallery and restart the experimental instance before your
              extension will work.
            </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note"> Note</th></tr><tr><td><p>
                Future releases of individual extensions may improve support in this area by updating the
                <span class="code">.targets</span> file included in the implementation to automatically deploy the nested VSIX
                extension(s) to the experimental instance for debugging purposes. Stay tuned!
              </p></td></tr></table></div></div></div><div class="collapsibleAreaRegion" id="UtilityLibraries"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png">Utility Library Packages</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          Utility libraries do not export any MEF components. As such, these libraries are safe
          for use in side-by-side loading scenarios. A copy of the assembly should be included
          in the distribution of your Visual Studio extension. When a utility library package
          is installed through NuGet, the assembly will be included in the resulting VSIX file
          by default.
        </p><p>
          Currently the following Utility libraries are included.
        </p><ul><li><p><a href="c2cfc56d-e966-492a-9b12-66c7d01e7146.htm">Shell Service Extensions</a></p></li><li><p><a href="3d25ef44-296a-4523-8286-ce65f8b47c76.htm">Shell Utility Library</a></p></li><li><p><a href="07a54f98-14af-49e8-96b4-7a15a7fcfe2d.htm">Text Editor Utility Library</a></p></li></ul><h4 class="subHeading">Assembly Binding Considerations</h4><div class="subsection"><p>
              Special steps are required to ensure that Visual Studio will be able to locate utility
              library assemblies at runtime. The specific configuration steps to take depend on the
              minimum version of Visual Studio your extension will support.
            </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note"> Note</th></tr><tr><td><p>
                These configuration steps should be performed in the project that creates your VSIX extension,
                even if another assembly actually references the utility library.
              </p></td></tr></table></div><ol><li><p>
                  Regardless of the version of Visual Studio you are supporting, you need to make sure your
                  extension is configured to generate a <span class="code">pkgdef</span> file. Open your extension's
                  project file in an XML editor and ensure that the following two properties are set to
                  <span class="code">true</span>.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAABABAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAABABAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAABABAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">GeneratePkgDefFile</span><span class="highlight-xml-bracket">&gt;</span>true<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">GeneratePkgDefFile</span><span class="highlight-xml-bracket">&gt;</span>
<span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">CopyBuildOutputToOutputDirectory</span><span class="highlight-xml-bracket">&gt;</span>true<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">CopyBuildOutputToOutputDirectory</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAABABAABAAA");</script></li><li><p>
                  The second step to configuring the extension is updating your <em>source.extension.vsixmanifest</em>
                  file to include a line to inform Visual Studio that your extension includes a <span class="code">pkgdef</span>
                  file. If you are using version 1 of this file (i.e. the file starts with <span class="code">&lt;Vsix Version="1.0.0"</span>),
                  make sure the following line is included inside the <span class="code">&lt;Content&gt;</span> element.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABAABAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EABAABAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABAABAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">VsPackage</span><span class="highlight-xml-bracket">&gt;</span>|%CurrentProject%|<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">VsPackage</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABAABAABAAA");</script><p>
                  If your extension uses version 2 of this file, <span class="placeholder">[TODO: fill this in]</span>.
                </p></li></ol><h4 class="subHeading">Visual Studio 2012 and Newer</h4><div class="subsection"><p>
                  If your extension only supports Visual Studio 2012 and newer, the
                  <a href="http://msdn2.microsoft.com/en-us/library/hh255336" target="_blank">ProvideCodeBaseAttribute</a>
                  provides the most efficient method for registering utility libraries with Visual Studio.
                  To use this attribute, simply add a reference to the <a href="https://www.nuget.org/packages/VSSDK.Shell.11/" target="_blank">VSSDK.Shell.11</a> (for extensions targeting Visual Studio 2012 and newer) or <a href="https://www.nuget.org/packages/VSSDK.Shell.12/" target="_blank">VSSDK.Shell.12</a> (for extensions targeting Visual Studio 2013 and newer) NuGet package. Specific
                  values for the <span class="placeholder">AssemblyName</span>, <span class="placeholder">AssemblyVersion</span>,
                  and <span class="placeholder">AssemblyFile</span> placeholders are described in the documentation for
                  the specific utility library.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAABAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAABAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[assembly: ProvideCodeBase(
    AssemblyName = <span class="highlight-literal">"{AssemblyName}"</span>,
    Version = <span class="highlight-literal">"{AssemblyVersion}"</span>,
    CodeBase = <span class="highlight-literal">"$PackageFolder$\\{AssemblyFile}"</span>)]</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABAAABAAA");</script></div><h4 class="subHeading">Visual Studio 2010 and Newer</h4><div class="subsection"><p>
                  If your extension supports Visual Studio 2010, you will need to include a copy of the
                  following registration attribute in your extension code.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACAAAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACAAAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EACAAAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACAAAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Reflection;
<span class="highlight-keyword">using</span> System.Runtime.InteropServices;
<span class="highlight-keyword">using</span> Microsoft.VisualStudio.Shell;

[AttributeUsage(AttributeTargets.Assembly, AllowMultiple = <span class="highlight-keyword">false</span>)]
<span class="highlight-keyword">internal</span> <span class="highlight-keyword">sealed</span> <span class="highlight-keyword">class</span> ProvideBindingPathAttribute : RegistrationAttribute
{
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">string</span> GetPathToKey(RegistrationContext context)
    {
        Guid componentGuid = GetAssemblyGuid(context.CodeBase);
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">string</span>.Concat(<span class="highlight-literal">@"BindingPaths\"</span>, componentGuid.ToString(<span class="highlight-literal">"B"</span>).ToUpperInvariant());
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Guid GetAssemblyGuid(<span class="highlight-keyword">string</span> codeBase)
    {
        <span class="highlight-keyword">string</span> assemblyFile = <span class="highlight-keyword">new</span> Uri(codeBase).LocalPath;
        Assembly assembly = Assembly.LoadFrom(codeBase);
        <span class="highlight-keyword">object</span>[] attributesData = assembly.GetCustomAttributes(<span class="highlight-keyword">typeof</span>(GuidAttribute), <span class="highlight-keyword">false</span>);
        <span class="highlight-keyword">if</span> (attributesData.Length == <span class="highlight-number">0</span>)
            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> ArgumentException(<span class="highlight-literal">"The specified assembly did not contain a [Guid] attribute."</span>);

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> Guid(((GuidAttribute)attributesData[<span class="highlight-number">0</span>]).Value);
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Register(RegistrationContext context)
    {
        <span class="highlight-keyword">if</span> (context == <span class="highlight-keyword">null</span>)
            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> ArgumentNullException(<span class="highlight-literal">"context"</span>);

        <span class="highlight-keyword">using</span> (Key childKey = context.CreateKey(GetPathToKey(context)))
        {
            childKey.SetValue(context.ComponentPath, <span class="highlight-keyword">string</span>.Empty);
        }
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Unregister(RegistrationContext context)
    {
        <span class="highlight-keyword">if</span> (context == <span class="highlight-keyword">null</span>)
            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> ArgumentNullException(<span class="highlight-literal">"context"</span>);

        context.RemoveKey(GetPathToKey(context));
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACAAAAABAAA");</script><p>
                  To use the attribute make sure your <em>AssemblyInfo.cs</em> contains the following
                  line.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAAAAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAAAAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAAAAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAAAAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[assembly: ProvideBindingPath]</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAAAAAABAAA");</script></div></div></div></div></div><div id="pageFooter" class="pageFooter"></div></body></html>