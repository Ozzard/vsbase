<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><META http-equiv="Content-Type" content="text/html; charset=utf-8"><link rel="SHORTCUT ICON" href="./../icons/favicon.ico"><link rel="stylesheet" type="text/css" href="./../styles/branding.css"><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css"><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Assembly Versioning in Extensible Applications</title><meta name="Language" content="en-us"><meta name="Microsoft.Help.Id" content="edbfd3ce-43f4-4f3f-a90c-bc22bda19fae"><meta name="Description" content="This page expands on the assembly versioning information originally described by Schabse LaksExtending Visual Studio, part 3: Assembly Versioninghttp://blog.slaks.net/2014-02-21/extending-visual-studio-part-3-assembly-versioning/."><meta name="Microsoft.Help.ContentType" content="Concepts"><meta name="BrandingAware" content="'true'"><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css"><meta name="SelfBranded" content="true"></head><body onload="onLoad()" class="primary-mtps-offline-document"><header class="ux-header"><div class="header-top-bar">Tunnel Vision Labs' Base Extensions Library for Visual Studio</div></header><div class="OH_outerDiv" style="padding: 35px 20px 0 20px;"><div class="OH_leftNav" id="LeftNav">
  <div id="tocnav">
    <div class="toclevel0" data-toclevel="0" style="padding-left: 0px;" data-childrenloaded="true"><a class="toc_expanded" onclick="javascript: Toggle(this);" href="#"></a><a data-tochassubtree="true" href="262e0a6e-ce5a-4f40-8f5e-3889dbb63784.htm" title="VS Base Extensions Library" tocid="roottoc">VS Base Extensions Library</a></div><div class="toclevel1" data-toclevel="1" style="padding-left: 13px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="262e0a6e-ce5a-4f40-8f5e-3889dbb63784.htm" title="Welcome" tocid="262e0a6e-ce5a-4f40-8f5e-3889dbb63784">Welcome</a></div><div class="toclevel1" data-toclevel="1" style="padding-left: 13px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="3927d416-9f25-4fdd-9807-daa0bf4b054d.htm" title="License" tocid="3927d416-9f25-4fdd-9807-daa0bf4b054d">License</a></div><div class="toclevel1 current" data-toclevel="1" style="padding-left: 13px;"><span class="toc_empty"></span><a data-tochassubtree="false" href="edbfd3ce-43f4-4f3f-a90c-bc22bda19fae.htm" title="Assembly Versioning" tocid="edbfd3ce-43f4-4f3f-a90c-bc22bda19fae">Assembly Versioning</a></div><div class="toclevel1" data-toclevel="1" style="padding-left: 13px;"><a class="toc_collapsed" onclick="javascript: Toggle(this);" href="#"></a><a data-tochassubtree="true" href="69c59220-5eff-4177-a632-b7c1b4981501.htm" title="Packages" tocid="69c59220-5eff-4177-a632-b7c1b4981501">Packages</a></div><div class="toclevel1" data-toclevel="1" style="padding-left: 13px;"><a class="toc_collapsed" onclick="javascript: Toggle(this);" href="#"></a><a data-tochassubtree="true" href="R_Project_VSBaseDocumentation.htm" title="API Reference" tocid="R_Project_VSBaseDocumentation">API Reference</a></div></div></div><div id="TocResize" class="OH_TocResize"><img id="ResizeImageIncrease" src="../icons/open.gif" onclick="onIncreaseToc()" alt="Expand" title="Expand"><img id="ResizeImageReset" src="../icons/close.gif" style="display:none" onclick="onResetToc()" alt="Minimize" title="Minimize"></div><div class="OH_outerContent" id="OuterContent" style="margin-left: 280px;"><h1 class="title">Assembly Versioning in Extensible Applications</h1><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>
        This page expands on the assembly versioning information originally described by
        <a class="mtps-external-link" title="Extending Visual Studio, part 3: Assembly Versioning" href="http://blog.slaks.net/2014-02-21/extending-visual-studio-part-3-assembly-versioning/" target="_blank">Schabse Laks</a>. In addition to a thorough breakdown of the advantages and
        limitations created by different policies towards assembly versioning, this page
        includes best practices for developing and consuming different kinds of assemblies.
      </p></div><a id="AssemblyKinds"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Assembly Types</div></div><dl class="authored"><dt>Immutable Assembly</dt><dd>
              An assembly which, once released, never changes its public API or strong name.
              New releases of an application ship the original version of any immutable assemblies
              which are still in use.
            </dd><dt>Versioned Assembly</dt><dd>
              An assembly which may change over time, and new versions of the assembly include
              only backwards-compatible changes. Extensible applications use assembly binding
              redirection to ensure only the newest version of the assembly is used at runtime.
            </dd><dt>Unversioned Assembly</dt><dd>
              Unversioned assemblies are associated with a particular version of an extensible
              application. Third-party assemblies may make use of APIs defined in unversioned
              assemblies; however, this will limit the use of the third-party assembly to the
              same specific version of the extensible application that the unversioned assembly
              was build for.
            </dd></dl><a id="ImmutableAssemblies"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Immutable Assemblies</div></div><p>
              Immutable assemblies are the most straightforward assemblies to consume in an
              extension. These dependencies introduce only a minimal amount of constraints on
              assemblies which use them.
            </p><h4 class="subHeading">Examples</h4><div class="subsection"><ul><li><strong>COM-Interop assemblies</strong>, such as <em>EnvDTE.dll</em>
                      or <em>Microsoft.VisualStudio.Shell.Interop.9.0.dll</em>.
                    </li><li><strong>Expressly immutable assemblies</strong>, such as
                      <em>Microsoft.VisualStudio.Shell.Immutable.10.0.dll</em>.
                    </li><li><strong>Interface assemblies for cross-version services</strong>, such
                      as the <em>Tvl.VisualStudio.OutputWindow.Interfaces.dll</em> assembly
                      used by the Output Window Service.
                    </li></ul></div><h4 class="subHeading">Best Practices for Producers</h4><div class="subsection"><p>
                  The following are some best practices for developers <em>creating</em>
                  immutable assemblies for extensible applications.
                </p><ul><li><strong>DO</strong> limit the content of immutable assemblies only
                      to the minimal amount of code required to ensure maximum portability. Bugs
                      or limitations present in shipping versions of immutable assemblies cannot
                      be corrected after release.
                    </li><li><strong>DO NOT</strong> ship two versions of an immutable assembly,
                      i.e. the <em>strong name</em> of the assembly should
                      never change. Remember that the strong name of an assembly is formed from
                      both the <span sdata="cer" target="T:System.Reflection.AssemblyVersionAttribute"><a href="http://msdn2.microsoft.com/en-us/library/zb298d28" target="_blank">AssemblyVersionAttribute</a></span>
                      and the key used for signing the assembly.
                    </li><li><strong>DO NOT</strong> make changes to the public API of an immutable
                      assembly. This includes changes which are generally considered non-breaking,
                      such as the introduction of an interface that did not previously exist.
                    </li><li><strong>AVOID</strong> making changes to the internal implementation of
                      items in an immutable assembly, and do not assume that the changes will take
                      effect. Since the strong name of the assembly will not be changed by the update,
                      there is no way to ensure that the application will load the updated version
                      of the assembly at runtime.
                    </li><li>
                      The source code for an immutable assembly may change, but generally only for
                      the purpose of updating the documentation and/or distribution mechanism(s)
                      for the assembly.
                    </li></ul></div><h4 class="subHeading">Best Practices for Consumers</h4><div class="subsection"><p>
                  The following are some best practices for developers <em>consuming</em>
                  immutable assemblies as part of extending an extensible application.
                </p><ul><li><strong>AVOID</strong> using APIs defined in immutable assemblies introduced
                      later than the <em>minimum</em> version of the application you
                      intend to support. Using an immutable assembly will limit your extension to working
                      with versions of an application starting with the point when the assembly was first
                      introduced. For example, using APIs defined in
                      <em>Microsoft.VisualStudio.Shell.Interop.11.dll</em> will limit your
                      extension to working with Visual Studio 2012 or newer. If you want to use these APIs
                      when available, you can either develop your extension as a versioned or unversioned
                      assembly, and distribute multiple versions of the extension according to the supported
                      version of the application.
                    </li></ul></div><a id="VersionedAssemblies"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Versioned Assemblies</div></div><p>
              Versioned assemblies are straightforward to consume in an extension, and tend to have strict
              backward compatibility guarantees even across multiple versions of the extensible application.
              By taking advantage of assembly binding redirection, extensions developed for previous versions
              of the application often continue working with new versions of the application.
            </p><p>
              Versioned assemblies have a more dramatic impact on service or utility extensions that are
              intended for consumption by other extensions. Since assembly binding redirection is a runtime
              feature, assemblies shared between multiple extensions must pay particular attention to the
              types used in the exposed API of the assembly. If the exposed API includes a reference to a
              versioned assembly, the shared assembly must be built multiple times, once for each version
              of the versioned assembly that has shipped to date. For example, the
              <a href="07a54f98-14af-49e8-96b4-7a15a7fcfe2d.htm" target="">Text Editor Utility Library</a> includes separate versions
              referencing the multiple versions of <em>Microsoft.VisualStudio.Text.Logic.dll</em>
              that have shipped to date.
            </p><h4 class="subHeading">Examples</h4><div class="subsection"><ul><li><strong>Public assemblies for extension development</strong>, such as
                      <em>Microsoft.VisualStudio.CoreUtility.dll</em> and
                      <em>Microsoft.VisualStudio.Text.Logic.dll</em>.
                    </li></ul></div><h4 class="subHeading">Best Practices for Producers</h4><div class="subsection"><p>
                  The following are some best practices for developers <em>creating</em>
                  versioned assemblies for extensible applications.
                </p><ul><li><strong>DO</strong> provide assembly binding redirection for the assembly to make
                      sure the runtime always only loads the most recent version of the assembly, even if one or
                      more assemblies in the application (or extensions) were compiled with a reference to a
                      previous release.
                    </li></ul></div><h4 class="subHeading">Best Practices for Consumers</h4><div class="subsection"><p>
                  The following are some best practices for developers <em>consuming</em>
                  versioned assemblies as part of extending an extensible application.
                </p><ul><li>
                      If your assembly will be used by other extensions and references members of the versioned
                      assembly in its exposed API, <strong>DO</strong> create multiple versions of your
                      assembly according to the versions of the versioned assembly that have been created to
                      date. For example, the <a href="07a54f98-14af-49e8-96b4-7a15a7fcfe2d.htm" target="">Text Editor Utility Library</a> may be
                      used by other Visual Studio extensions, and exposes the
                      <em>Microsoft.VisualStudio.Text.Data.dll</em> versioned assembly in its API.
                      For this reason, separate versions of this library are released for extensions targeting
                      a minimum Visual Studio version of 2010, 2012, and 2013.
                    </li><li><strong>AVOID</strong> using APIs defined in versioned assemblies introduced
                      later than the <em>minimum</em> version of the application you
                      intend to support. Using a versioned assembly will limit your extension to working
                      with versions of an application starting with the point when the assembly was first
                      introduced. For example, using APIs defined in
                      <em>Microsoft.VisualStudio.Shell.Interop.11.dll</em> will limit your
                      extension to working with Visual Studio 2012 or newer. If you want to use these APIs
                      when available, you can either develop your extension as a versioned or unversioned
                      assembly, and distribute multiple versions of the extension according to the supported
                      version of the application.
                    </li></ul></div><a id="UnversionedAssemblies"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Unversioned Assemblies</div></div><p>
              Unversioned assemblies are the easiest assemblies to develop and deploy for fixed versions of
              an extensible application, but pose unique challenges when attempting to share an assembly
              between multiple extensions all targeting the same application.
            </p><h4 class="subHeading">Examples</h4><div class="subsection"><ul><li><strong>Private assemblies included with an extensible application</strong>,
                      such as <em>Microsoft.VisualStudio.Languages.CSharp.dll</em> and
                      <em>Microsoft.VisualStudio.Language.CallHierarchy.dll</em>.
                    </li><li><strong>Assemblies which reference an unversioned assembly</strong>, such
                      as the <a class="mtps-external-link" href="http://visualstudiogallery.msdn.microsoft.com/3a55d546-0cb2-4991-a002-e6be8ce09f08" target="_blank">Inheritance Margin</a> extension which references the <em>Microsoft.VisualStudio.Languages.CSharp.dll</em>
                      assembly.
                    </li><li><strong>Shared assemblies designed for side-by-side loading</strong>,
                      such as <em>Tvl.VisualStudio.Text.Utility.10.0.dll</em> and
                      <em>Tvl.VisualStudio.Shell.Utility.10.0.dll</em>.
                    </li></ul></div><h4 class="subHeading">Best Practices for Producers</h4><div class="subsection"><p>
                  The following are some best practices for developers <em>creating</em>
                  unversioned assemblies for extensible applications.
                </p><ul><li><strong>DO</strong> design your assembly to support side-by-side loading scenarios,
                      with unique strong names given to different shipped versions of your assembly.
                    </li><li><strong>DO NOT</strong> export MEF components from unversioned assemblies. If the
                      runtime loads multiple versions of your assembly (or a different version than you expected),
                      extensions could suddenly fail en-masse. This avoids the problem described by <a class="mtps-external-link" title="Authoring a Utility Library for Visual Studio" href="http://blogs.msdn.com/b/jaredpar/archive/2012/05/07/authoring-a-utility-library-for-visual-studio.aspx" target="_blank">Jared Par</a> as he developed a utility library for Visual Studio.
                    </li></ul></div><h4 class="subHeading">Best Practices for Consumers</h4><div class="subsection"><p>
                  The following are some best practices for developers <em>consuming</em>
                  unversioned assemblies as part of extending an extensible application.
                </p><ul><li><strong>DO</strong> create separate versions of your extension for each released
                      version of the unversioned assembly that you intend to support, even if the use of the
                      unversioned assembly is not exposed through the API.
                    </li></ul></div></div></div></div></div><div id="OH_footer" class="OH_footer"><p></p><div class="OH_feedbacklink"><a href="mailto:?subject=Tunnel+Vision+Labs%27+Base+Extensions+Library+for+Visual+Studio+Assembly+Versioning+in+Extensible+Applications+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div></div><script src="//code.jquery.com/jquery-1.11.0.min.js"></script><script type="text/javascript">$(document).ready(function () {DocumentReady();});</script></body></html>