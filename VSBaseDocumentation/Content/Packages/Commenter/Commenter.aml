<?xml version="1.0" encoding="utf-8"?>
<topic id="01698620-4fc8-4cb0-bb42-5b3a84b8dd66" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--<summary>
      <para>MEF Commenter services library for Visual Studio extension developers.</para>
    </summary>-->

    <introduction>
      <para>
        The Commenter package provides support for extensions to support the Comment and Uncomment
        commands in Visual Studio using MEF.
      </para>
      <para>
        Library Status: Under Development (not yet released)
      </para>
    </introduction>

    <section address="Installation">
      <title>Installation and Distribution</title>
      <content>
        <para>
          This package is available through NuGet under the following package IDs.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <codeInline>Tvl.VisualStudio.Commenter</codeInline>: This package should be installed into the project
              that creates your VSIX file. If your Visual Studio extension is not broken into multiple sub-projects,
              this is the only Output Window package you will need to explicitly install to use these features.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeInline>Tvl.VisualStudio.Commenter.Interfaces</codeInline>: This package should be installed for
              any project that uses the Commenter Service.
            </para>
          </listItem>
          <listItem>
            <para>
              <link xlink:href="07a54f98-14af-49e8-96b4-7a15a7fcfe2d"/>: This utility library includes a default
              implementation of <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenter</codeEntityReference>
              which is suitable for most languages that use line and/or block comments. This package should be
              installed for any project that needs to export a commenter component for a new content type.
            </para>
          </listItem>
        </list>
        <para>
          After installing the appropriate NuGet package(s), you will need to configure your extension to
          inform Visual Studio of the dependency by including the following block in your <localUri>source.extension.vsixmanifest</localUri>
          file.
        </para>
        <code language="xml">
          <![CDATA[
          <Reference Id="Tvl.VisualStudio.Commenter.3EF11167-A319-43DB-B1B4-A9778A90FAE0">
            <Name>Visual Studio Commenter Services</Name>
            <VsixPath>Tvl.VisualStudio.Commenter.vsix</VsixPath>
          </Reference>
          ]]>
        </code>
        <alert class="note">
          <para>
            A future release of this extension may include a feature to configure the <localUri>source.extension.vsixmanifest</localUri>
            file automatically.
          </para>
        </alert>
      </content>
    </section>

    <section address="Use">
      <title>Using the Commenter Service</title>
      <content>
        <para>
          This services allows extension developers to easily support the Comment and Uncomment commands
          for new languages in Visual Studio.
        </para>
      </content>
      <sections>
        <section>
          <title>Providing a Standard Commenter</title>
          <content>
            <para>
              The easiest way to provide commenting features is to use the standard
              <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Commenter</codeEntityReference>
              implementation of the
              <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenter</codeEntityReference>
              interface. The following steps show how to create an instance of
              <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Commenter</codeEntityReference>
              and provide it to the Commenter Service by exporting an instance of
              <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenterProvider</codeEntityReference>.
            </para>
            <list class="ordered">
              <listItem>
                <para>
                  Create a new class derived from
                  <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenterProvider</codeEntityReference>.
                  This class is exported using the MEF
                  <codeEntityReference>T:System.ComponentModel.Composition.ExportAttribute</codeEntityReference>
                  for one or more specific content types using the
                  <codeEntityReference>T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute</codeEntityReference>.
                  The commenter in the example supports C++-style line and block comments, for the
                  <codeInline>SimpleC</codeInline> content type.
                </para>
                <code language="csharp">
                  <![CDATA[
                  [Export(typeof(ICommenterProvider))]
                  [ContentType("SimpleC")]
                  public sealed class SimpleCCommenterProvider : ICommenterProvider
                  {
                      public ICommenter GetCommenter(ITextView textView)
                      {
                          // TODO: provide a commenter
                          throw new NotImplementedException();
                      }
                  }
                  ]]>
                </code>
              </listItem>
              <listItem>
                <para>
                  Define the comment format(s) the commenter will support.
                </para>
                <code language="csharp">
                  <![CDATA[
                  private static readonly LineCommentFormat LineCommentFormat =
                      new LineCommentFormat("//");
                  private static readonly BlockCommentFormat BlockCommentFormat =
                      new BlockCommentFormat("/*", "*/");
                  ]]>
                </code>
              </listItem>
              <listItem>
                <para>
                  Implement the
                  <codeEntityReference>M:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenterProvider.GetCommenter(Microsoft.VisualStudio.Text.Editor.ITextView)</codeEntityReference>
                  method by returning an instance of
                  <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Commenter</codeEntityReference>. The
                  <codeEntityReference>T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry</codeEntityReference>
                  service is imported in order for
                  <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Commenter</codeEntityReference>
                  to correctly support the Undo and Redo commands. The following code is the complete implementation of
                  <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenterProvider</codeEntityReference>
                  required to support the Comment and Uncomment commands for a simple language.
                </para>
                <code language="csharp">
                  <![CDATA[
                  [Export(typeof(ICommenterProvider))]
                  [ContentType("SimpleC")]
                  public sealed class SimpleCCommenterProvider : ICommenterProvider
                  {
                      private static readonly LineCommentFormat LineCommentFormat =
                          new LineCommentFormat("//");
                      private static readonly BlockCommentFormat BlockCommentFormat =
                          new BlockCommentFormat("/*", "*/");

                      [Import]
                      private ITextUndoHistoryRegistry TextUndoHistoryRegistry
                      {
                          get;
                          set;
                      }

                      public ICommenter GetCommenter(ITextView textView)
                      {
                          Func<Commenter> factory =
                              () => new Commenter(textView, TextUndoHistoryRegistry, LineCommentFormat, BlockCommentFormat);
                          return textView.Properties.GetOrCreateSingletonProperty<Commenter>(factory);
                      }
                  }
                  ]]>
                </code>
              </listItem>
            </list>
          </content>
        </section>
      </sections>
    </section>

    <relatedTopics>
      <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenterProvider</codeEntityReference>
      <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenter</codeEntityReference>
      <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Commenter</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
