<?xml version="1.0" encoding="utf-8"?>
<topic id="01698620-4fc8-4cb0-bb42-5b3a84b8dd66" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--<summary>
      <para>MEF Commenter services library for Visual Studio extension developers.</para>
    </summary>-->

    <introduction>
      <para>
        The Commenter package provides support for extensions to support the Comment and Uncomment
        commands in Visual Studio using MEF.
      </para>
      <para>
        Library Status: Under Development (not yet released)
      </para>
    </introduction>

    <section address="Installation">
      <title>Installation and Distribution</title>
      <content>
        <para>
          To ensure broad compatibility across a wide range of project configurations and Visual Studio versions, the
          Commenter Service is distributed through several different NuGet packages.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <link xlink:href="#ExtensionPackage">Commenter Service Extension</link>: Installation of this package
              is required to ensure the Commenter Service functionality is available to your extension within Visual
              Studio.
            </para>
          </listItem>
          <listItem>
            <para>
              <link xlink:href="#InterfacesPackage">Commenter Interfaces Library</link>: Installation of this package
              is required if your Visual Studio extension uses or provides any Commenter functionality.
            </para>
          </listItem>
          <listItem>
            <para>
              <link xlink:href="#TextUtility">Text Editor Utility Library</link>: Installation of this package is
              optional, as described below.
            </para>
          </listItem>
        </list>
      </content>
      <sections>
        <section address="ExtensionPackage">
          <title>Commenter Service Extension</title>
          <content>
            <para>
              In the project which creates your VSIX file (i.e. the project which contains the <localUri>source.extension.vsixmanifest</localUri>
              file, add a NuGet reference to the <codeInline>Tvl.VisualStudio.Commenter</codeInline> package. After installing the NuGet package,
              you will need to configure your extension to inform Visual Studio of the dependency by including the following block in your
              <localUri>source.extension.vsixmanifest</localUri> file.
            </para>
            <alert class="important">
              <para>
                This code assumes the use of a "Version 1" VSIX manifest, targeting Visual Studio 2010 and newer. The reference declaration for
                a "Version 2" manifest may differ from the syntax provided here.
              </para>
            </alert>
            <code language="xml">
              <![CDATA[
              <Reference Id="Tvl.VisualStudio.Commenter.F3FD3E6D-611C-4703-B160-0C425AAFBACF">
                <Name>Visual Studio Commenter Services</Name>
                <VsixPath>Tvl.VisualStudio.Commenter.vsix</VsixPath>
              </Reference>
              ]]>
            </code>
            <alert class="note">
              <para>
                A future release of this extension may include a feature to configure the <localUri>source.extension.vsixmanifest</localUri>
                file automatically.
              </para>
            </alert>
          </content>
        </section>
        <section address="InterfacesPackage">
          <title>Commenter Interfaces Library</title>
          <content>
            <para>
              The Commenter Interfaces Library should be installed in any package which uses the Commenter Service. The library is available
              under several different NuGet packages. Only one version of the library should be installed in a project, selected according
              to the specific version(s) of Visual Studio a project intends to support.
            </para>
            <list class="bullet">
              <listItem>
                <para>
                  <codeInline>Tvl.VisualStudio.Commenter.Interfaces.10</codeInline>: For projects which support Visual Studio 2010 and newer.
                  In particular, this package should be used in projects which depend on the <externalLink>
                    <linkText>VSSDK.Text.10</linkText>
                    <linkUri>http://www.nuget.org/packages/VSSDK.Text.10</linkUri>
                  </externalLink> package.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>Tvl.VisualStudio.Commenter.Interfaces.11</codeInline>: For projects which support Visual Studio 2012 and newer.
                  In particular, this package should be used in projects which depend on the <externalLink>
                    <linkText>VSSDK.Text.11</linkText>
                    <linkUri>http://www.nuget.org/packages/VSSDK.Text.11</linkUri>
                  </externalLink> package.
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>Tvl.VisualStudio.Commenter.Interfaces.12</codeInline>: For projects which support Visual Studio 2013 and newer.
                  In particular, this package should be used in projects which depend on the <externalLink>
                    <linkText>VSSDK.Text.12</linkText>
                    <linkUri>http://www.nuget.org/packages/VSSDK.Text.12</linkUri>
                  </externalLink> package.
                </para>
              </listItem>
            </list>
          </content>
        </section>
        <section address="TextUtility">
          <title>Text Editor Utility Library</title>
          <content>
            <para>
              The <link xlink:href="07a54f98-14af-49e8-96b4-7a15a7fcfe2d"/> includes a default implementation of
              <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenter</codeEntityReference> which is suitable for most
              languages that use line and/or block comments. The installation instructions for this utility library should be followed for
              any project which needs to export a standard commenter component for a new content type.
            </para>
          </content>
        </section>
      </sections>
    </section>

    <section address="Use">
      <title>Using the Commenter Service</title>
      <content>
        <para>
          This services allows extension developers to easily support the Comment and Uncomment commands
          for new languages in Visual Studio.
        </para>
      </content>
      <sections>
        <section>
          <title>Providing a Standard Commenter</title>
          <content>
            <para>
              The easiest way to provide commenting features is to use the standard
              <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Commenter</codeEntityReference>
              implementation of the
              <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenter</codeEntityReference>
              interface. The following steps show how to create an instance of
              <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Commenter</codeEntityReference>
              and provide it to the Commenter Service by exporting an instance of
              <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenterProvider</codeEntityReference>.
            </para>
            <list class="ordered">
              <listItem>
                <para>
                  Create a new class derived from
                  <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenterProvider</codeEntityReference>.
                  This class is exported using the MEF
                  <codeEntityReference>T:System.ComponentModel.Composition.ExportAttribute</codeEntityReference>
                  for one or more specific content types using the
                  <codeEntityReference>T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute</codeEntityReference>.
                  The commenter in the example supports C++-style line and block comments, for the
                  <codeInline>SimpleC</codeInline> content type.
                </para>
                <code language="csharp">
                  <![CDATA[
                  [Export(typeof(ICommenterProvider))]
                  [ContentType("SimpleC")]
                  public sealed class SimpleCCommenterProvider : ICommenterProvider
                  {
                      public ICommenter GetCommenter(ITextBuffer textBuffer)
                      {
                          // TODO: provide a commenter
                          throw new NotImplementedException();
                      }
                  }
                  ]]>
                </code>
              </listItem>
              <listItem>
                <para>
                  Define the comment format(s) the commenter will support.
                </para>
                <code language="csharp">
                  <![CDATA[
                  private static readonly LineCommentFormat LineCommentFormat =
                      new LineCommentFormat("//");
                  private static readonly BlockCommentFormat BlockCommentFormat =
                      new BlockCommentFormat("/*", "*/");
                  ]]>
                </code>
              </listItem>
              <listItem>
                <para>
                  Implement the
                  <codeEntityReference>M:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenterProvider.GetCommenter(Microsoft.VisualStudio.Text.ITextBuffer)</codeEntityReference>
                  method by returning an instance of
                  <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Commenter</codeEntityReference>. The
                  <codeEntityReference>T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry</codeEntityReference>
                  service is imported in order for
                  <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Commenter</codeEntityReference>
                  to correctly support the Undo and Redo commands. The following code is the complete implementation of
                  <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenterProvider</codeEntityReference>
                  required to support the Comment and Uncomment commands for a simple language.
                </para>
                <code language="csharp">
                  <![CDATA[
                  [Export(typeof(ICommenterProvider))]
                  [ContentType("SimpleC")]
                  public sealed class SimpleCCommenterProvider : ICommenterProvider
                  {
                      private static readonly LineCommentFormat LineCommentFormat =
                          new LineCommentFormat("//");
                      private static readonly BlockCommentFormat BlockCommentFormat =
                          new BlockCommentFormat("/*", "*/");

                      [Import]
                      private ITextUndoHistoryRegistry TextUndoHistoryRegistry
                      {
                          get;
                          set;
                      }

                      public ICommenter GetCommenter(ITextBuffer textBuffer)
                      {
                          Func<Commenter> factory =
                              () => new Commenter(textBuffer, TextUndoHistoryRegistry, LineCommentFormat, BlockCommentFormat);
                          return textBuffer.Properties.GetOrCreateSingletonProperty<Commenter>(factory);
                      }
                  }
                  ]]>
                </code>
              </listItem>
            </list>
          </content>
        </section>
      </sections>
    </section>

    <section address="Implementation">
      <title>Implementation Details</title>
      <content>
        <para>
          Since this extension exports a new MEF service for use across multiple extensions and multiple versions of
          Visual Studio, extremely careful consideration must be given to several implementation details to ensure
          consumers will not encounter conflicts in the future or be <externalLink>
            <linkText>subjected to cumbersome workarounds</linkText>
            <linkUri>http://blogs.msdn.com/b/jaredpar/archive/2012/05/07/authoring-a-utility-library-for-visual-studio.aspx</linkUri>
          </externalLink>.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <legacyBold>Assembly Versioning:</legacyBold> To ensure long-term compatibility of this extension with many other
              extensions, all communication between the MEF-exported Output Window service and consumers of the API is performed
              through a dedicated interfaces assembly, <codeInline>Tvl.VisualStudio.OutputWindow.Interfaces</codeInline>. Following
              the initial release of this extension, the contracts defined by this assembly (e.g. the strong name and API) will
              <legacyItalic>never change</legacyItalic>. If the source for this assembly is ever updated, it will only be in ways
              that are guaranteed to not cause problems for existing installations, such as updated XML documentation or updating
              the NuGet packaging to simplify the installation process.
            </para>
          </listItem>
          <listItem>
            <para>
              <legacyBold>Assembly Binding:</legacyBold> Since the <codeInline>Tvl.VisualStudio.OutputWindow.Interfaces</codeInline>
              assembly does not appear in a <codeInline>&lt;MefComponent&gt;</codeInline> element within <localUri>source.extension.vsixmanifest</localUri>,
              there are a number of situations with traditional deployments where Visual Studio may be unable to locate the assembly
              at runtime. To avoid this situation, the <codeInline>Tvl.VisualStudio.OutputWindow</codeInline> extension created
              for the implementation of the Output Window Service registers its installation folder in the Visual Studio binding path
              using the <codeInline>[ProvideBindingPath]</codeInline> registration attribute. This feature ensures that the
              Output Window interfaces assembly will be available to all Visual Studio extensions, regardless of the manner in which
              they are deployed.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
      <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenterProvider</codeEntityReference>
      <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Interfaces.ICommenter</codeEntityReference>
      <codeEntityReference>T:Tvl.VisualStudio.Text.Commenter.Commenter</codeEntityReference>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
