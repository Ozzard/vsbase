<?xml version="1.0" encoding="utf-8"?>
<topic id="c2cfc56d-e966-492a-9b12-66c7d01e7146" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <summary>
      <para>Shell Services utility library for Visual Studio extension developers.</para>
    </summary>

    <introduction>
      <para>
        The Shell Services package provides extension methods to simplify access to services provided by
        service providers, as well as access to global services provided by the Visual Studio IDE.
      </para>
      <para>
        Library Status: Public
      </para>
    </introduction>

    <section address="Installation">
      <title>Installation and Distribution</title>
      <content>
        <para>
          This package may be installed through NuGet. Separate packages are available depending on the
          specific version of Visual Studio an extension is targeting.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <codeInline>Tvl.VisualStudio.ShellServices.10</codeInline>: For extensions targeting Visual Studio 2010 and newer.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeInline>Tvl.VisualStudio.ShellServices.11</codeInline>: For extensions targeting Visual Studio 2012 and newer.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeInline>Tvl.VisualStudio.ShellServices.12</codeInline>: For extensions targeting Visual Studio 2013 and newer.
            </para>
          </listItem>
        </list>
        <para>
          This is a Utility Library package, as described on the <link xlink:href="69c59220-5eff-4177-a632-b7c1b4981501"/> page. If you are
          registering this assembly using the <codeEntityReference>T:Microsoft.VisualStudio.Shell.ProvideCodeBaseAttribute</codeEntityReference>
          attribute, use the following code to replace the described placeholders.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              For extensions targeting Visual Studio 2010 and newer.
            </para>
            <code language="csharp">
              <![CDATA[
              [assembly: ProvideCodeBase(
                  AssemblyName = "Tvl.VisualStudio.ShellServices.10",
                  Version = "1.0.0.0",
                  CodeBase = "$PackageFolder$\\Tvl.VisualStudio.ShellServices.10.dll")]
              ]]>
            </code>
          </listItem>
          <listItem>
            <para>
              For extensions targeting Visual Studio 2012 and newer.
            </para>
            <code language="csharp">
              <![CDATA[
              [assembly: ProvideCodeBase(
                  AssemblyName = "Tvl.VisualStudio.ShellServices.11",
                  Version = "1.0.0.0",
                  CodeBase = "$PackageFolder$\\Tvl.VisualStudio.ShellServices.11.dll")]
              ]]>
            </code>
          </listItem>
          <listItem>
            <para>
              For extensions targeting Visual Studio 2013 and newer.
            </para>
            <code language="csharp">
              <![CDATA[
              [assembly: ProvideCodeBase(
                  AssemblyName = "Tvl.VisualStudio.ShellServices.12",
                  Version = "1.0.0.0",
                  CodeBase = "$PackageFolder$\\Tvl.VisualStudio.ShellServices.12.dll")]
              ]]>
            </code>
          </listItem>
        </list>
      </content>
    </section>

    <section address="Use">
      <title>Using the Extension Methods</title>
      <content>
        <para>
          Extension methods for the following types are included.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <codeEntityReference qualifyHint="true">T:System.IServiceProvider</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference qualifyHint="true">T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference qualifyHint="true">T:Microsoft.VisualStudio.Shell.SVsServiceProvider</codeEntityReference>
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <section address="Implementation">
      <title>Implementation Details</title>
      <content>
        <para>
          This package simplifies access to these global services by ensuring the correct access method is used.
          For example, consider the differences required for accessing each of the following services.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg</codeEntityReference>: This global
              service is accessed by simply requesting an instance of <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.SVsAddProjectItemDlg</codeEntityReference>
              from the service provider. This naming pattern is common in the Visual Studio SDK, but not all-inclusive.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider</codeEntityReference>: This global
              service is accessed by simply requesting an instance of the interface from the service provider.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.IVsNavigationTool</codeEntityReference>: This global
              service is accessed by requesting an instance of <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.SVsClassView</codeEntityReference>
              from the service provider. This interface is the best representation of the <markup><strong>Class View</strong>
              </markup> pane,
              despite the fact that <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.IVsClassView</codeEntityReference> is
              another available interface.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorUtilities</codeEntityReference>: This global
              service is accessed by requesting an instance of <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.SVsFontAndColorStorage</codeEntityReference>,
              and is one of two global service interfaces provided by this object (the other is <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage</codeEntityReference>).
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager</codeEntityReference>: This global
              service is accessed by first obtaining the <codeEntityReference>T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2</codeEntityReference>
              service, and calling the <codeEntityReference>M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.GetExpansionManager(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager@)</codeEntityReference>
              method on the result.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2</codeEntityReference>: This global
              service is accessed by simply requesting an instance of <codeEntityReference>T:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass</codeEntityReference>
              from the service provider. The pattern is similar to <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg</codeEntityReference>
              above, but the naming convention is different.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.Language.Intellisense.IGlyphService</codeEntityReference>: This global
              service is accessed by first obtaining an instance of <codeEntityReference>T:Microsoft.VisualStudio.ComponentModelHost.IComponentModel</codeEntityReference>
              from the service provider, and then calling the <codeEntityReference>M:Microsoft.VisualStudio.ComponentModelHost.IComponentModel.GetService``1</codeEntityReference>
              method. This pattern is common for global services that are provided through the Managed Extensibility Framework (MEF) rather than
              through the traditional Visual Studio service mechanisms.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
