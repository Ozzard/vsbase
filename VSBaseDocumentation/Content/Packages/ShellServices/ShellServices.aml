<?xml version="1.0" encoding="utf-8"?>
<topic id="c2cfc56d-e966-492a-9b12-66c7d01e7146" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <summary>
      <para>Shell Services utility library for Visual Studio extension developers.</para>
    </summary>

    <introduction>
      <para>
        The Shell Services package provides extension methods to simplify access to services provided by
        service providers, as well as access to global services provided by the Visual Studio IDE.
      </para>
    </introduction>

    <section address="Installation">
      <title>Installation and Distribution</title>
      <content>
        <para>
          This package may be installed through NuGet. The package ID is <codeInline>Tvl.VisualStudio.ShellServices.10</codeInline>.
        </para>
        <para>
          This package does not export any MEF artifacts, so it is safe for side-by-side loading scenarios.
          A copy of the assembly should be included in the distribution of your Visual Studio extension.
          When the package is installed through NuGet, the assembly will be included in the resulting VSIX
          file by default.
        </para>
      </content>
      <sections>
        <section>
          <title>Assembly Binding Considerations</title>
          <content>
            <para>
              Special steps are required to ensure that Visual Studio will be able to locate this utility
              assembly at runtime. The specific configuration steps to take depend on the minimum version
              of Visual Studio your extension will support.
            </para>
            <alert class="note">
              <para>
                These configuration steps should be performed in the project that creates your VSIX extension,
                even if another assembly actually references the Shell Services utility assembly.
              </para>
            </alert>
            <list class="ordered">
              <listItem>
                <para>
                  Regardless of the version of Visual Studio you are supporting, you need to make sure your
                  extension is configured to generate a <codeInline>pkgdef</codeInline> file. Open your extension's
                  project file in an XML editor and ensure that the following two properties are set to
                  <codeInline>true</codeInline>.
                </para>
                <code language="xml">
                  <![CDATA[
                  <GeneratePkgDefFile>true</GeneratePkgDefFile>
                  <CopyBuildOutputToOutputDirectory>true</CopyBuildOutputToOutputDirectory>
                  ]]>
                </code>
              </listItem>
              <listItem>
                <para>
                  The second step to configuring the extension is updating your <localUri>source.extension.vsixmanifest</localUri>
                  file to include a line to inform Visual Studio that your extension includes a <codeInline>pkgdef</codeInline>
                  file. If you are using version 1 of this file (i.e. the file starts with <codeInline><![CDATA[<Vsix Version="1.0.0"]]></codeInline>),
                  make sure the following line is included inside the <codeInline><![CDATA[<Content>]]></codeInline> element.
                </para>
                <code language="xml">
                  <![CDATA[
                  <VsPackage>|%CurrentProject%|</VsPackage>
                  ]]>
                </code>
                <para>
                  If your extension uses version 2 of this file, <placeholder>[TODO: fill this in]</placeholder>.
                </para>
              </listItem>
            </list>
          </content>
          <sections>
            <section>
              <title>Visual Studio 2012 and Newer</title>
              <content>
                <para>
                  If your extension only supports Visual Studio 2012 and newer, the
                  <codeEntityReference>T:Microsoft.VisualStudio.Shell.ProvideCodeBaseAttribute</codeEntityReference>
                  provides the most efficient method for registering the utility assembly with Visual Studio.
                  To use this attribute, simply add a reference to the <externalLink>
                    <linkText>VSSDK.Shell.11</linkText>
                    <linkUri>https://www.nuget.org/packages/VSSDK.Shell.11/</linkUri>
                  </externalLink> (for extensions targeting Visual Studio 2012 and newer) or <externalLink>
                    <linkText>VSSDK.Shell.12</linkText>
                    <linkUri>https://www.nuget.org/packages/VSSDK.Shell.12/</linkUri>
                  </externalLink> (for extensions targeting Visual Studio 2013 and newer) NuGet package.
                </para>
                <code language="csharp">
                  <![CDATA[[assembly: ProvideCodeBase(
    AssemblyName = "Tvl.VisualStudio.ShellServices.10",
    Version = "1.0.0.0",
    CodeBase = "$PackageFolder$\\Tvl.VisualStudio.ShellServices.10.dll")]]]>
                </code>
              </content>
            </section>
            <section>
              <title>Visual Studio 2010 and Newer</title>
              <content>
                <para>
                  If your extension supports Visual Studio 2010, you will need to include a copy of the
                  following registration attribute in your extension code.
                </para>
                <code language="csharp">
                  <![CDATA[using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Shell;

[AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)]
internal sealed class ProvideBindingPathAttribute : RegistrationAttribute
{
    private static string GetPathToKey(RegistrationContext context)
    {
        Guid componentGuid = GetAssemblyGuid(context.CodeBase);
        return string.Concat(@"BindingPaths\", componentGuid.ToString("B").ToUpperInvariant());
    }

    private static Guid GetAssemblyGuid(string codeBase)
    {
        string assemblyFile = new Uri(codeBase).LocalPath;
        Assembly assembly = Assembly.LoadFrom(codeBase);
        object[] attributesData = assembly.GetCustomAttributes(typeof(GuidAttribute), false);
        if (attributesData.Length == 0)
            throw new ArgumentException("The specified assembly did not contain a [Guid] attribute.");

        return new Guid(((GuidAttribute)attributesData[0]).Value);
    }

    public override void Register(RegistrationContext context)
    {
        if (context == null)
            throw new ArgumentNullException("context");

        using (Key childKey = context.CreateKey(GetPathToKey(context)))
        {
            childKey.SetValue(context.ComponentPath, string.Empty);
        }
    }

    public override void Unregister(RegistrationContext context)
    {
        if (context == null)
            throw new ArgumentNullException("context");

        context.RemoveKey(GetPathToKey(context));
    }
}
]]>
                </code>
                <para>
                  To use the attribute make sure your <localUri>AssemblyInfo.cs</localUri> contains the following
                  line.
                </para>
                <code language="csharp"><![CDATA[[assembly: ProvideBindingPath]]]></code>
              </content>
            </section>
          </sections>
        </section>
      </sections>
    </section>

    <section address="Use">
      <title>Using the Extension Methods</title>
      <content>
        <para>
          Extension methods for the following types are included.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <codeEntityReference qualifyHint="true">T:System.IServiceProvider</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference qualifyHint="true">T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference qualifyHint="true">T:Microsoft.VisualStudio.Shell.SVsServiceProvider</codeEntityReference>
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <section address="Implementation">
      <title>Implementation Details</title>
      <content>
        <para>
          This package simplifies access to these global services by ensuring the correct access method is used.
          For example, consider the differences required for accessing each of the following services.
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg</codeEntityReference>: This global
              service is accessed by simply requesting an instance of <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.SVsAddProjectItemDlg</codeEntityReference>
              from the service provider. This naming pattern is common in the Visual Studio SDK, but not all-inclusive.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider</codeEntityReference>: This global
              service is accessed by simply requesting an instance of the interface from the service provider.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.IVsNavigationTool</codeEntityReference>: This global
              service is accessed by requesting an instance of <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.SVsClassView</codeEntityReference>
              from the service provider. This interface is the best representation of the <markup><strong>Class View</strong>
              </markup> pane,
              despite the fact that <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.IVsClassView</codeEntityReference> is
              another available interface.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Micrsoft.VisualStudio.Shell.Interop.IVsFontAndColorUtilities</codeEntityReference>: This global
              service is accessed by requesting an instance of <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.SVsFontAndColorStorage</codeEntityReference>,
              and is one of two global service interfaces provided by this object (the other is <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.IVsFontAndColorStorage</codeEntityReference>).
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager</codeEntityReference>: This global
              service is accessed by first obtaining the <codeEntityReference>T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2</codeEntityReference>
              service, and calling the <codeEntityReference>M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.GetExpansionManager</codeEntityReference>
              method on the result.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2</codeEntityReference>: This global
              service is accessed by simply requesting an instance of <codeEntityReference>T:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass</codeEntityReference>
              from the service provider. The pattern is similar to <codeEntityReference>T:Microsoft.VisualStudio.Shell.Interop.IVsAddProjectItemDlg</codeEntityReference>
              above, but the naming convention is different.
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference>T:Microsoft.VisualStudio.Language.Intellisense.IGlyphService</codeEntityReference>: This global
              service is accessed by first obtaining an instance of <codeEntityReference>T:Microsoft.VisualStudio.ComponentModelHost.IComponentModel</codeEntityReference>
              from the service provider, and then calling the <codeEntityReference>M:Microsoft.VisualStudio.ComponentModelHost.IComponentModel.GetService``1</codeEntityReference>
              method. This pattern is common for global services that are provided through the Managed Extensibility Framework (MEF) rather than
              through the traditional Visual Studio service mechanisms.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
